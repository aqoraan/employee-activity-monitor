{
  "name": "Mac System Monitor - Security Alerts",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook/monitoring",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "monitoring-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "severity-check",
              "leftValue": "={{ $json.severity }}",
              "rightValue": "High",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "high-severity-filter",
      "name": "High Severity Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "usb-blocked-check",
              "leftValue": "={{ $json.type }}",
              "rightValue": "UsbBlocked",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "usb-blocked-filter",
      "name": "USB Blocked Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "uninstall-check",
              "leftValue": "={{ $json.type }}",
              "rightValue": "UninstallDetected",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "uninstall-filter",
      "name": "Uninstall Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 500]
    },
    {
      "parameters": {
        "functionCode": "// Enhanced logging with device information\nconst event = $input.first().json;\n\n// Extract device information\nconst deviceInfo = event.deviceInfo || {};\nconst uninstallDetails = event.uninstallDetails || {};\n\n// Create detailed log entry\nconst logEntry = {\n  timestamp: event.timestamp,\n  eventType: event.type,\n  severity: event.severity,\n  description: event.description,\n  computer: event.computer,\n  user: event.user,\n  \n  // Device Information\n  deviceInfo: {\n    serialNumber: deviceInfo.serialNumber || 'Unknown',\n    primaryMacAddress: deviceInfo.primaryMacAddress || 'Unknown',\n    allMacAddresses: deviceInfo.allMacAddresses || [],\n    biosSerialNumber: deviceInfo.biosSerialNumber || 'Unknown',\n    motherboardSerialNumber: deviceInfo.motherboardSerialNumber || 'Unknown',\n    hardwareUUID: deviceInfo.hardwareUUID || 'Unknown',\n    modelIdentifier: deviceInfo.modelIdentifier || 'Unknown',\n    processorInfo: deviceInfo.processorInfo || 'Unknown',\n    memoryInfo: deviceInfo.memoryInfo || 'Unknown',\n    diskInfo: deviceInfo.diskInfo || 'Unknown',\n    installationPath: deviceInfo.installationPath || 'Unknown',\n    deviceFingerprint: deviceInfo.deviceFingerprint || 'Unknown'\n  },\n  \n  // Event Details\n  details: event.details || {},\n  \n  // Uninstall Details (if applicable)\n  uninstallDetails: event.type === 'UninstallDetected' ? {\n    processId: uninstallDetails.processId || 'Unknown',\n    processName: uninstallDetails.processName || 'Unknown',\n    commandLine: uninstallDetails.commandLine || 'Unknown',\n    uninstallTime: uninstallDetails.uninstallTime || 'Unknown'\n  } : null,\n  \n  // File Transfer Details (if applicable)\n  fileTransferDetails: event.type === 'FileTransfer' ? {\n    fileName: event.details?.FilePath?.split('/').pop() || 'Unknown',\n    filePath: event.details?.FilePath || 'Unknown',\n    eventType: event.details?.EventType || 'Unknown',\n    directory: event.details?.Directory || 'Unknown'\n  } : null,\n  \n  // USB Device Details (if applicable)\n  usbDeviceDetails: (event.type === 'UsbDrive' || event.type === 'UsbBlocked') ? {\n    deviceId: event.details?.DeviceID || 'Unknown',\n    deviceName: event.details?.DeviceName || 'Unknown',\n    vendorId: event.details?.VendorID || 'Unknown',\n    productId: event.details?.ProductID || 'Unknown',\n    blocked: event.type === 'UsbBlocked',\n    reason: event.details?.Reason || 'Unknown'\n  } : null\n};\n\n// Add to log file\nconst fs = require('fs');\nconst logPath = '/var/log/mac-system-monitor.log';\nconst logEntryString = JSON.stringify(logEntry, null, 2) + '\\n---\\n';\n\ntry {\n  fs.appendFileSync(logPath, logEntryString);\n} catch (error) {\n  console.error('Failed to write to log file:', error);\n}\n\nreturn logEntry;"
      },
      "id": "enhanced-logging",
      "name": "Enhanced Logging",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 500]
    },
    {
      "parameters": {
        "functionCode": "// Create detailed email content\nconst event = $input.first().json;\nconst deviceInfo = event.deviceInfo || {};\nconst uninstallDetails = event.uninstallDetails || {};\nconst fileTransferDetails = event.fileTransferDetails || {};\nconst usbDeviceDetails = event.usbDeviceDetails || {};\n\n// Determine email subject based on event type\nlet subject = '';\nlet priority = 'normal';\n\nswitch (event.eventType) {\n  case 'UsbBlocked':\n    subject = 'üö® CRITICAL: Unauthorized USB Device Blocked';\n    priority = 'high';\n    break;\n  case 'UninstallDetected':\n    subject = 'üö® CRITICAL: System Monitor Uninstallation Detected';\n    priority = 'high';\n    break;\n  case 'BlacklistedApp':\n    subject = '‚ö†Ô∏è WARNING: Blacklisted Application Detected';\n    priority = 'high';\n    break;\n  case 'NetworkActivity':\n    subject = '‚ö†Ô∏è WARNING: Suspicious Network Activity Detected';\n    priority = 'medium';\n    break;\n  case 'FileTransfer':\n    subject = 'üìÅ INFO: File Transfer Activity Detected';\n    priority = 'medium';\n    break;\n  case 'UsbDrive':\n    subject = 'üíæ INFO: USB Device Connected';\n    priority = 'low';\n    break;\n  case 'AppInstallation':\n    subject = 'üì± INFO: Application Installation Detected';\n    priority = 'low';\n    break;\n  default:\n    subject = '‚ÑπÔ∏è INFO: System Activity Detected';\n    priority = 'low';\n}\n\n// Create detailed email body\nlet emailBody = `\nüîç SECURITY ALERT - MAC SYSTEM MONITOR\n=====================================\n\nüìÖ EVENT DETAILS\n---------------\n‚Ä¢ Time: ${event.timestamp}\n‚Ä¢ Type: ${event.eventType}\n‚Ä¢ Severity: ${event.severity}\n‚Ä¢ Description: ${event.description}\n‚Ä¢ Computer: ${event.computer}\n‚Ä¢ User: ${event.user}\n\nüñ•Ô∏è DEVICE INFORMATION\n--------------------\n‚Ä¢ Serial Number: ${deviceInfo.serialNumber}\n‚Ä¢ Primary MAC Address: ${deviceInfo.primaryMacAddress}\n‚Ä¢ All MAC Addresses: ${deviceInfo.allMacAddresses?.join(', ') || 'None'}\n‚Ä¢ BIOS Serial: ${deviceInfo.biosSerialNumber}\n‚Ä¢ Motherboard Serial: ${deviceInfo.motherboardSerialNumber}\n‚Ä¢ Hardware UUID: ${deviceInfo.hardwareUUID}\n‚Ä¢ Model: ${deviceInfo.modelIdentifier}\n‚Ä¢ Processor: ${deviceInfo.processorInfo}\n‚Ä¢ Memory: ${deviceInfo.memoryInfo}\n‚Ä¢ Disk: ${deviceInfo.diskInfo}\n‚Ä¢ Installation Path: ${deviceInfo.installationPath}\n‚Ä¢ Device Fingerprint: ${deviceInfo.deviceFingerprint}\n`;\n\n// Add event-specific details\nif (event.eventType === 'UninstallDetected' && uninstallDetails) {\n  emailBody += `\nüóëÔ∏è UNINSTALL DETAILS\n------------------\n‚Ä¢ Process ID: ${uninstallDetails.processId}\n‚Ä¢ Process Name: ${uninstallDetails.processName}\n‚Ä¢ Command Line: ${uninstallDetails.commandLine}\n‚Ä¢ Uninstall Time: ${uninstallDetails.uninstallTime}\n`;\n}\n\nif (event.eventType === 'FileTransfer' && fileTransferDetails) {\n  emailBody += `\nüìÅ FILE TRANSFER DETAILS\n----------------------\n‚Ä¢ File Name: ${fileTransferDetails.fileName}\n‚Ä¢ File Path: ${fileTransferDetails.filePath}\n‚Ä¢ Event Type: ${fileTransferDetails.eventType}\n‚Ä¢ Directory: ${fileTransferDetails.directory}\n`;\n}\n\nif ((event.eventType === 'UsbDrive' || event.eventType === 'UsbBlocked') && usbDeviceDetails) {\n  emailBody += `\nüíæ USB DEVICE DETAILS\n-------------------\n‚Ä¢ Device ID: ${usbDeviceDetails.deviceId}\n‚Ä¢ Device Name: ${usbDeviceDetails.deviceName}\n‚Ä¢ Vendor ID: ${usbDeviceDetails.vendorId}\n‚Ä¢ Product ID: ${usbDeviceDetails.productId}\n‚Ä¢ Blocked: ${usbDeviceDetails.blocked ? 'YES' : 'NO'}\n‚Ä¢ Reason: ${usbDeviceDetails.reason}\n`;\n}\n\n// Add action recommendations\nemailBody += `\nüéØ RECOMMENDED ACTIONS\n-------------------\n`;\n\nswitch (event.eventType) {\n  case 'UsbBlocked':\n    emailBody += `‚Ä¢ Investigate unauthorized USB device attempt\n‚Ä¢ Review USB whitelist configuration\n‚Ä¢ Check for potential security breach\n‚Ä¢ Update device whitelist if needed\n`;\n    break;\n  case 'UninstallDetected':\n    emailBody += `‚Ä¢ IMMEDIATE ACTION REQUIRED\n‚Ä¢ Verify if uninstallation was authorized\n‚Ä¢ Investigate who performed the uninstallation\n‚Ä¢ Reinstall monitoring software if unauthorized\n‚Ä¢ Review security logs for suspicious activity\n`;\n    break;\n  case 'BlacklistedApp':\n    emailBody += `‚Ä¢ Investigate blacklisted application\n‚Ä¢ Check if installation was authorized\n‚Ä¢ Remove unauthorized application\n‚Ä¢ Review application installation policies\n`;\n    break;\n  case 'NetworkActivity':\n    emailBody += `‚Ä¢ Investigate suspicious network connection\n‚Ä¢ Check if connection was authorized\n‚Ä¢ Review network security policies\n‚Ä¢ Monitor for additional suspicious activity\n`;\n    break;\n  case 'FileTransfer':\n    emailBody += `‚Ä¢ Review file transfer activity\n‚Ä¢ Verify if transfer was authorized\n‚Ä¢ Check file content for sensitive data\n‚Ä¢ Monitor for additional file transfers\n`;\n    break;\n  default:\n    emailBody += `‚Ä¢ Review event details\n‚Ä¢ Monitor for related activities\n‚Ä¢ Update security policies if needed\n`;\n}\n\nemailBody += `\nüìä EVENT STATISTICS\n-----------------\n‚Ä¢ Total Events Today: [Calculated from logs]\n‚Ä¢ High Severity Events: [Calculated from logs]\n‚Ä¢ USB Blocking Events: [Calculated from logs]\n‚Ä¢ File Transfer Events: [Calculated from logs]\n\n---\nThis alert was generated automatically by the Mac System Monitor.\nFor support, contact your system administrator.\n`;\n\nreturn {\n  subject: subject,\n  body: emailBody,\n  priority: priority,\n  event: event\n};"
      },
      "id": "create-email-content",
      "name": "Create Email Content",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 700]
    },
    {
      "parameters": {
        "fromEmail": "security@yourcompany.com",
        "toEmail": "admin@yourcompany.com",
        "subject": "={{ $json.subject }}",
        "text": "={{ $json.body }}",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "send-email",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [900, 700],
      "credentials": {
        "smtp": {
          "id": "smtp-credentials",
          "name": "SMTP Credentials"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Create Slack notification\nconst event = $input.first().json;\nconst emailContent = $('Create Email Content').first().json;\n\n// Determine Slack channel based on severity\nlet channel = '#general';\nif (event.severity === 'Critical' || event.severity === 'High') {\n  channel = '#security-alerts';\n} else if (event.severity === 'Medium') {\n  channel = '#monitoring';\n}\n\n// Create Slack message\nconst slackMessage = {\n  channel: channel,\n  text: `*${emailContent.subject}*\\n${emailContent.body.split('\\n').slice(0, 10).join('\\n')}...`,\n  attachments: [\n    {\n      color: event.severity === 'Critical' ? 'danger' : event.severity === 'High' ? 'warning' : 'good',\n      fields: [\n        {\n          title: 'Computer',\n          value: event.computer,\n          short: true\n        },\n        {\n          title: 'User',\n          value: event.user,\n          short: true\n        },\n        {\n          title: 'Serial Number',\n          value: event.deviceInfo?.serialNumber || 'Unknown',\n          short: true\n        },\n        {\n          title: 'MAC Address',\n          value: event.deviceInfo?.primaryMacAddress || 'Unknown',\n          short: true\n        }\n      ]\n    }\n  ]\n};\n\nreturn slackMessage;"
      },
      "id": "create-slack-notification",
      "name": "Create Slack Notification",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 500]
    },
    {
      "parameters": {
        "channel": "={{ $json.channel }}",
        "text": "={{ $json.text }}",
        "attachments": "={{ $json.attachments }}",
        "otherOptions": {
          "username": "Mac System Monitor",
          "icon_emoji": ":shield:"
        }
      },
      "id": "send-slack",
      "name": "Send Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [1120, 500],
      "credentials": {
        "slackApi": {
          "id": "slack-credentials",
          "name": "Slack Credentials"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Store event in database\nconst event = $input.first().json;\n\n// This would typically connect to a database\n// For now, we'll create a structured log entry\nconst dbEntry = {\n  id: Date.now().toString(),\n  timestamp: event.timestamp,\n  eventType: event.eventType,\n  severity: event.severity,\n  computer: event.computer,\n  user: event.user,\n  deviceInfo: event.deviceInfo,\n  details: event.details,\n  uninstallDetails: event.uninstallDetails,\n  fileTransferDetails: event.fileTransferDetails,\n  usbDeviceDetails: event.usbDeviceDetails,\n  processed: true,\n  processedAt: new Date().toISOString()\n};\n\n// In a real implementation, this would save to a database\nconsole.log('Database entry:', JSON.stringify(dbEntry, null, 2));\n\nreturn dbEntry;"
      },
      "id": "store-event",
      "name": "Store Event",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"success\",\n  \"message\": \"Event processed successfully\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\",\n  \"eventType\": \"{{ $json.eventType }}\",\n  \"severity\": \"{{ $json.severity }}\"\n}"
      },
      "id": "response",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 700]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "High Severity Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Enhanced Logging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "High Severity Filter": {
      "main": [
        [
          {
            "node": "USB Blocked Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Uninstall Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USB Blocked Filter": {
      "main": [
        [
          {
            "node": "Create Email Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Uninstall Filter": {
      "main": [
        [
          {
            "node": "Create Email Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Logging": {
      "main": [
        [
          {
            "node": "Create Email Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Email Content": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        [
          {
            "node": "Store Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Slack Notification": {
      "main": [
        [
          {
            "node": "Send Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Event": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "mac-system-monitor-workflow",
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "security-monitoring",
      "name": "Security Monitoring"
    }
  ]
} 