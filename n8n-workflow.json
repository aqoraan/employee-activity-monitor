{
  "name": "Employee Activity Monitor",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "monitoring",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "monitoring-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Parse the incoming webhook data\nconst data = $input.first().json;\n\n// Extract relevant information\nconst activity = {\n  timestamp: data.timestamp,\n  type: data.type,\n  description: data.description,\n  severity: data.severity,\n  computer: data.computer,\n  user: data.user,\n  details: data.details || {}\n};\n\n// Determine email subject based on severity\nlet subject = `[${activity.severity.toUpperCase()}] `;\n\nswitch(activity.type) {\n  case 'UsbDrive':\n    subject += 'USB Drive Activity Detected';\n    break;\n  case 'FileTransfer':\n    subject += 'File Transfer Activity Detected';\n    break;\n  case 'AppInstallation':\n    subject += 'Application Installation Detected';\n    break;\n  case 'BlacklistedApp':\n    subject += 'BLACKLISTED APPLICATION DETECTED';\n    break;\n  case 'NetworkActivity':\n    subject += 'Suspicious Network Activity Detected';\n    break;\n  default:\n    subject += 'System Activity Detected';\n}\n\n// Create email body\nlet body = `Employee Activity Alert\\n\\n`;\nbody += `Time: ${activity.timestamp}\\n`;\nbody += `Computer: ${activity.computer}\\n`;\nbody += `User: ${activity.user}\\n`;\nbody += `Activity Type: ${activity.type}\\n`;\nbody += `Severity: ${activity.severity}\\n`;\nbody += `Description: ${activity.description}\\n\\n`;\n\n// Add details if available\nif (Object.keys(activity.details).length > 0) {\n  body += 'Details:\\n';\n  for (const [key, value] of Object.entries(activity.details)) {\n    body += `  ${key}: ${value}\\n`;\n  }\n}\n\nreturn {\n  subject: subject,\n  body: body,\n  severity: activity.severity,\n  type: activity.type,\n  computer: activity.computer,\n  user: activity.user\n};"
      },
      "id": "process-data",
      "name": "Process Activity Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "severity-check",
              "leftValue": "={{ $json.severity }}",
              "rightValue": "High",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "severity-filter",
      "name": "High Severity Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "fromEmail": "security@yourcompany.com",
        "toEmail": "admin@yourcompany.com",
        "subject": "={{ $json.subject }}",
        "text": "={{ $json.body }}",
        "options": {}
      },
      "id": "send-email",
      "name": "Send Email Alert",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "fromEmail": "security@yourcompany.com",
        "toEmail": "it-support@yourcompany.com",
        "subject": "={{ $json.subject }}",
        "text": "={{ $json.body }}",
        "options": {}
      },
      "id": "send-low-severity",
      "name": "Send Low Severity Alert",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [900, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"status\": \"success\",\n  \"message\": \"Activity logged successfully\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Activity Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Activity Data": {
      "main": [
        [
          {
            "node": "High Severity Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "High Severity Filter": {
      "main": [
        [
          {
            "node": "Send Email Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Low Severity Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Alert": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Low Severity Alert": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
} 